package uq.deco2800.pyramidscheme.animations;

import javafx.animation.Animation;
import javafx.animation.Timeline;
import javafx.geometry.Point2D;
import uq.deco2800.pyramidscheme.animations.emitter.Emitter;
import uq.deco2800.pyramidscheme.board.RecTile;
import uq.deco2800.pyramidscheme.cards.supercards.CardHiddenState;
import uq.deco2800.pyramidscheme.game.GameState;
import uq.deco2800.pyramidscheme.match.MatchCard;


/**
 * Created by nick on 7/10/16.
 * <p>
 * The AIAnimations class extends the Animation class and handles all the computer
 * players animations (ie. the Artificial Intelligence (AI) player). Any animation
 * which is generated by the AI is created through the methods used within this class
 * and subsequently added to the animations queue to be called in the correct
 * sequence of animations.
 */
public class AIAnimations extends Animations {

    public AIAnimations(GameState gs, AnimationCallback callback) {
        super(gs, callback);
    }

    RecTile tile = null;

    /**
     * Triggers Pyramid refill for the AI if out of cards.
     */
    public void animatePyramidRefill() {
        // Animate refill with parameter isUser == false
        int count = gs.getAIPyramid().getPyramidType().getSize();
        animatePyramidRefill(count, false);
    }

    /**
     * Adds the animation for the AI card to movement and flip to the animation queue.
     *
     * @param card to be played by the AI
     * @param tile the location the AI intends to place the card
     */
    public void animateAIMove(MatchCard card, RecTile tile) {
        // Remove from pyramid
        gs.getAIPyramid().confirmRemoval(card);
        // Add to animation pile in gamestate
        gs.addAnimatingCard(card, CardHiddenState.AIHIDDEN);

        Timeline animation = animateCardMovement(
                card,
                tile.getX(),
                tile.getY());
        animation.setOnFinished(event -> {
            //Remove from gamestate animation pile
            gs.removeAnimatingCard(card, CardHiddenState.AIHIDDEN);
            // Flip card onto board
            this.tile = tile;
            flipCard(card, CardHiddenState.AIHIDDEN, CardHiddenState.VISIBLE, AI_BOARD_FLIP);
        });
        addToAnimationQueue(animation, AI_PLAYING);
    }

    /**
     * Adds the animation for the AI user when it grinds a card for duck dust to the animation queue.
     *
     * @param card to be placed into grinder for duck dust
     */
    public void grindCard(MatchCard card) {
        // Remove from pyramid
        gs.getAIPyramid().confirmRemoval(card);
        // Add to animation pile
        gs.addAnimatingCard(card, CardHiddenState.AIHIDDEN);
        Point2D grinderOrigin = gs.getGrinder().getOrigin();
        // Animate movement
        Animation animation = animateCardMovement(card, (int) grinderOrigin.getX(), (int) grinderOrigin.getY());

        animation.setOnFinished(e -> {
            gs.removeAnimatingCard(card, CardHiddenState.AIHIDDEN);
            gs.addParticles(Emitter.DUCK_DUST.emit(card.getX() + 115, card.getY() + 75));
            animationFinished(AI_GRINDER);
        });
        addToAnimationQueue(animation, AI_GRINDER);
    }
}
